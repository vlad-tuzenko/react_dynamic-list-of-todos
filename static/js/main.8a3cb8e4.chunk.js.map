{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleQuery","selectedStatus","handleChange","event","target","name","value","setState","filterTodo","todos","props","filter","todo","completed","title","includes","this","selectedUser","onSelectUser","filteredTodos","className","htmlFor","type","id","placeholder","onChange","map","userId","isSelected","classNames","checked","readOnly","onClick","React","Component","request","url","a","fetch","response","ok","Error","status","json","getUser","CurrentUser","email","phone","isLoading","fetchUser","then","finally","prevProps","clearUser","App","selectedUserId","clearSelectedUser","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a3cb8e4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUser: number;\n  onSelectUser (userId: number): void;\n};\n\ntype State = {\n  titleQuery: string;\n  selectedStatus: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    titleQuery: '',\n    selectedStatus: 'all',\n  };\n\n  handleChange = (\n    event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'titleQuery': {\n        this.setState({ titleQuery: value });\n        break;\n      }\n\n      case 'selectedStatus': {\n        this.setState({ selectedStatus: value });\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  };\n\n  filterTodo = () => {\n    const { todos } = this.props;\n    const { titleQuery, selectedStatus } = this.state;\n\n    switch (selectedStatus) {\n      case 'active': {\n        return todos.filter(todo => (!todo.completed && todo.title.includes(titleQuery)));\n        break;\n      }\n\n      case 'completed': {\n        return todos.filter(todo => (todo.completed && todo.title.includes(titleQuery)));\n        break;\n      }\n\n      default: {\n        return todos.filter(todo => (todo.title.includes(titleQuery)));\n      }\n    }\n  };\n\n  render(): React.ReactNode {\n    const { selectedUser, onSelectUser } = this.props;\n    const { titleQuery, selectedStatus } = this.state;\n    const filteredTodos = this.filterTodo();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form className=\"TodoList__form\">\n          <label htmlFor=\"title-input\">\n            Todo title:\n            <input\n              className=\"TodoList__form-input\"\n              type=\"text\"\n              name=\"titleQuery\"\n              id=\"title-input\"\n              placeholder=\"type title here...\"\n              value={titleQuery}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label htmlFor=\"select-status\">\n            Todo status:\n            <select\n              className=\"TodoList__form-select\"\n              name=\"selectedStatus\"\n              id=\"select-status\"\n              value={selectedStatus}\n              onChange={this.handleChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </label>\n        </form>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => {\n              const {\n                completed, title, id, userId,\n              } = todo;\n              const isSelected = todo.userId === selectedUser;\n\n              return (\n                <li\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--checked': completed,\n                    'TodoList__item--unchecked': !completed,\n                  })}\n                  key={id}\n                >\n                  <label htmlFor=\"input-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      checked={completed}\n                      id=\"input-checkbox\"\n                      readOnly\n                    />\n                    <p>{title}</p>\n                  </label>\n\n                  <button\n                    className={classNames('button', 'TodoList__user-button',\n                      { 'TodoList__user-button--selected': isSelected })}\n                    type=\"button\"\n                    onClick={() => onSelectUser(userId)}\n                  >\n                    {`User #${userId}`}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const request = async (url:string) => {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = () => {\n  const url = 'https://mate.academy/students-api/todos';\n\n  return request(url);\n};\n\nexport const getUser = (userId: number) => {\n  const url = `https://mate.academy/students-api/users/${userId}`;\n\n  return request(url);\n};\n","import React from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  clearUser(): void;\n};\n\ntype State = {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n  isLoading: boolean;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps:Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.fetchUser();\n    }\n  }\n\n  fetchUser = () => {\n    this.setState({ isLoading: true });\n    getUser(this.props.userId)\n      .then(({\n        id, name, email, phone,\n      }) => this.setState({\n        id, name, email, phone,\n      }))\n      .finally(() => this.setState({ isLoading: false }));\n  };\n\n  render(): React.ReactNode {\n    const {\n      id, name, email, phone, isLoading,\n    } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {isLoading\n          ? 'Loading user data... Please, wait'\n          : (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${id}`}</span>\n              </h2>\n              <h3 className=\"CurrentUser__name\">{name}</h3>\n              <p className=\"CurrentUser__email\">{email}</p>\n              <p className=\"CurrentUser__phone\">{phone}</p>\n              <button\n                className=\"button CurrentUser__clear\"\n                type=\"button\"\n                onClick={this.props.clearUser}\n              >\n                Clear\n              </button>\n            </>\n          )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './types';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  isLoading: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    getTodos()\n      .then(result => this.setState({ todos: result }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  onSelectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { todos, selectedUserId, isLoading } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {isLoading\n            ? 'Loading todos list... Please, wait'\n            : (\n              <TodoList\n                todos={todos}\n                selectedUser={selectedUserId}\n                onSelectUser={this.onSelectUser}\n              />\n            )}\n\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}